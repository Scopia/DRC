paras = list()
dist = c(rt, rnorm)
dist
dist[1]
dist[[1]](1,2)
paras
paras$rt = c(1,2)
dist[[1]](paras$rt)
paras$rt
dist[[1]](**paras$rt)
dist[[1]](*paras$rt)
paras$rt = list(1,2)
paras$rt
dist[[1]](paras$rt)
dist[[1]](**paras$rt)
temp = list(shape = 1, rate = 2)
temp
unlist(paras)
unlist(temp)
dist[d](n[k], unlist(temp))
dist
dist[1](n[k], unlist(temp))
dist[1]
dist[1](1, unlist(temp))
dist[1](1, temp)
temp
dist[1](1, NULL)
dist[1](1,2)
dist[1](1)
dist[[1]]
dist[[1]](1)
dist[[1]](1,2)
dist[[1]](1, unlist(temp))
dist[[1]](1, temp)
paras$rt
paras$rt = c(1,2)
dist[[1]](1, paras$rt)
DataGeneration <- function(K, n, dimension, RandMat = list(dist = rnorm, mean = 0, sd = 30), dist, paras){
#K: nums of categories
#n: vector, sample size of each class
#dimension: nums of variables
#RandMat: Specifies the distribution that generates the random covariance matrix.
#dist: vector of functions for specifing distribution of each feature, length of K.
#paras: A list contains necessary parameters corresponding to each element of dist.
sigma0<-list()
for (i in 1:K) {
sigma0[[i]] = matrix(RandMat$dist(p*p,unlist(RandMat[[-1]])),ncol = p,nrow = p)
}
x <- list()
y <- list()
for (k in 1:K){
xx = list()
for (d in 1:dimension) {
xx[[d]] = dist[[d]](n[k], paras[[d]])
}
x[[k]] = sqrt(n[k]-1)*qr.Q(qr(Reduce(cbind,xx)))%*%sqrt(diag(svd(sigma0[[k]])$d))%*%t(svd(sigma0[[k]])$v)
y[[k]] = rep(k, n[k])
}
X <- Reduce(cbind,x)
X <- scale(X)
colnames(X) <- NULL
Y <- as.factor(unlist(y))
Data <- as.data.frame(X)
Data[, dimension+1] <- Y
names(Data)[dimension+1] <- "y_p"
return(Data)
}
DataGeneration <- function(K, n, dimension, dist, paras, RandMat = list(dist = rnorm, mean = 0, sd = 30)){
#K: nums of categories
#n: vector, sample size of each class
#dimension: nums of variables
#RandMat: Specifies the distribution that generates the random covariance matrix.
#dist: vector of functions for specifing distribution of each feature, length of K.
#paras: A list contains necessary parameters corresponding to each element of dist.
sigma0<-list()
for (i in 1:K) {
sigma0[[i]] = matrix(RandMat$dist(p*p,unlist(RandMat[[-1]])),ncol = p,nrow = p)
}
x <- list()
y <- list()
for (k in 1:K){
xx = list()
for (d in 1:dimension) {
xx[[d]] = dist[[d]](n[k], paras[[d]])
}
x[[k]] = sqrt(n[k]-1)*qr.Q(qr(Reduce(cbind,xx)))%*%sqrt(diag(svd(sigma0[[k]])$d))%*%t(svd(sigma0[[k]])$v)
y[[k]] = rep(k, n[k])
}
X <- Reduce(cbind,x)
X <- scale(X)
colnames(X) <- NULL
Y <- as.factor(unlist(y))
Data <- as.data.frame(X)
Data[, dimension+1] <- Y
names(Data)[dimension+1] <- "y_p"
return(Data)
}
data = DataGeneration(2, c(50,150), 3, c(rt,rt,rt), list(rt = 2, rt1 = 3 , rt2 = 4))
DataGeneration <- function(K, n, dimension, dist, paras, RandMat = list(dist = rnorm, mean = 0, sd = 30)){
#K: nums of categories
#n: vector, sample size of each class
#dimension: nums of variables
#RandMat: Specifies the distribution that generates the random covariance matrix.
#dist: vector of functions for specifing distribution of each feature, length of K.
#paras: A list contains necessary parameters corresponding to each element of dist.
sigma0<-list()
for (i in 1:K) {
sigma0[[i]] = matrix(RandMat$dist(dimension*dimension,unlist(RandMat[[-1]])),ncol = p,nrow = p)
}
x <- list()
y <- list()
for (k in 1:K){
xx = list()
for (d in 1:dimension) {
xx[[d]] = dist[[d]](n[k], paras[[d]])
}
x[[k]] = sqrt(n[k]-1)*qr.Q(qr(Reduce(cbind,xx)))%*%sqrt(diag(svd(sigma0[[k]])$d))%*%t(svd(sigma0[[k]])$v)
y[[k]] = rep(k, n[k])
}
X <- Reduce(cbind,x)
X <- scale(X)
colnames(X) <- NULL
Y <- as.factor(unlist(y))
Data <- as.data.frame(X)
Data[, dimension+1] <- Y
names(Data)[dimension+1] <- "y_p"
return(Data)
}
data = DataGeneration(2, c(50,150), 3, c(rt,rt,rt), list(rt = 2, rt1 = 3 , rt2 = 4))
a = list(dist = rnorm, mean = 0, sd = 1)
a[[-1]]
a[[2:]]
a[[2:end]]
a[[2:length(a)]]
a[[1:3]]
a[2:]
a[2]
a[-1]
DataGeneration <- function(K, n, dimension, dist, paras, RandMat = list(dist = rnorm, mean = 0, sd = 30)){
#K: nums of categories
#n: vector, sample size of each class
#dimension: nums of variables
#RandMat: Specifies the distribution that generates the random covariance matrix.
#dist: vector of functions for specifing distribution of each feature, length of K.
#paras: A list contains necessary parameters corresponding to each element of dist.
sigma0<-list()
for (i in 1:K) {
sigma0[[i]] = matrix(RandMat$dist(dimension*dimension,unlist(RandMat[-1])),ncol = p,nrow = p)
}
x <- list()
y <- list()
for (k in 1:K){
xx = list()
for (d in 1:dimension) {
xx[[d]] = dist[[d]](n[k], paras[[d]])
}
x[[k]] = sqrt(n[k]-1)*qr.Q(qr(Reduce(cbind,xx)))%*%sqrt(diag(svd(sigma0[[k]])$d))%*%t(svd(sigma0[[k]])$v)
y[[k]] = rep(k, n[k])
}
X <- Reduce(cbind,x)
X <- scale(X)
colnames(X) <- NULL
Y <- as.factor(unlist(y))
Data <- as.data.frame(X)
Data[, dimension+1] <- Y
names(Data)[dimension+1] <- "y_p"
return(Data)
}
data = DataGeneration(2, c(50,150), 3, c(rt,rt,rt), list(rt = 2, rt1 = 3 , rt2 = 4))
DataGeneration <- function(K, n, dimension, dist, paras, RandMat = list(dist = rnorm, mean = 0, sd = 30)){
#K: nums of categories
#n: vector, sample size of each class
#dimension: nums of variables
#RandMat: Specifies the distribution that generates the random covariance matrix.
#dist: vector of functions for specifing distribution of each feature, length of K.
#paras: A list contains necessary parameters corresponding to each element of dist.
sigma0<-list()
for (i in 1:K) {
sigma0[[i]] = matrix(RandMat$dist(dimension*dimension,unlist(RandMat[-1])),ncol = dimension,nrow = dimension)
}
x <- list()
y <- list()
for (k in 1:K){
xx = list()
for (d in 1:dimension) {
xx[[d]] = dist[[d]](n[k], paras[[d]])
}
x[[k]] = sqrt(n[k]-1)*qr.Q(qr(Reduce(cbind,xx)))%*%sqrt(diag(svd(sigma0[[k]])$d))%*%t(svd(sigma0[[k]])$v)
y[[k]] = rep(k, n[k])
}
X <- Reduce(cbind,x)
X <- scale(X)
colnames(X) <- NULL
Y <- as.factor(unlist(y))
Data <- as.data.frame(X)
Data[, dimension+1] <- Y
names(Data)[dimension+1] <- "y_p"
return(Data)
}
data = DataGeneration(2, c(50,150), 3, c(rt,rt,rt), list(rt = 2, rt1 = 3 , rt2 = 4))
DataGeneration <- function(K, n, dimension, dist, paras, RandMat = list(dist = rnorm, mean = 0, sd = 30)){
#K: nums of categories
#n: vector, sample size of each class
#dimension: nums of variables
#RandMat: Specifies the distribution that generates the random covariance matrix.
#dist: vector of functions for specifing distribution of each feature, length of K.
#paras: A list contains necessary parameters corresponding to each element of dist.
sigma0<-list()
for (i in 1:K) {
sigma0[[i]] = matrix(RandMat$dist(dimension*dimension,unlist(RandMat[-1])),ncol = dimension,nrow = dimension)
}
x <- list()
y <- list()
for (k in 1:K){
xx = list()
for (d in 1:dimension) {
xx[[d]] = dist[[d]](n[k], paras[[d]])
}
x[[k]] = sqrt(n[k]-1)*qr.Q(qr(Reduce(cbind,xx)))%*%sqrt(diag(svd(sigma0[[k]])$d))%*%t(svd(sigma0[[k]])$v)
y[[k]] = rep(k, n[k])
}
X <- Reduce(rbind,x)
X <- scale(X)
colnames(X) <- NULL
Y <- as.factor(unlist(y))
Data <- as.data.frame(X)
Data[, dimension+1] <- Y
names(Data)[dimension+1] <- "y_p"
return(Data)
}
data = DataGeneration(2, c(50,150), 3, c(rt,rt,rt), list(rt = 2, rt1 = 3 , rt2 = 4))
data
library(caret)
library(MASS)
library(Matrix)
library(pROC)
library(Rtsne)
library(ggplot2)
setwd("~/Downloads/paper/DRCCode")
source('GaussDataGeneration.R')
source('dataPartition.R')
source('kernel_func.R')
source('measureCal.R')
source('modelTrain.R')
source('predictDRC.R')
source('visulization.R')
K = 2
n = c(50, 150)
dimension = 3
n_f = 10
sigpar = 0.21
lambda = 4.01
data = GaussDataGeneration(K, n, dimension = dimension, mix_num = 1)
data = GaussDataGeneration(K, n, dimension = dimension, mix_num = 2)
